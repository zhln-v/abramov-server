import { prisma } from '../../../../core/db';
import { CreateCategoryDto, UpdateCategoryDto } from '../dto/categories.schema';
import { NotFoundError } from '../../../../core/errors/AppError';

export class CategoryService {
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏)
     */
    static async getAll() {
        return prisma.category.findMany({
            orderBy: { name: 'asc' },
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
     */
    static async getById(id: string) {
        const category = await prisma.category.findUnique({
            where: { id },
        });
        if (!category) {
            throw new NotFoundError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        return category;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
     */
    static async create(data: CreateCategoryDto) {
        return prisma.category.create({
            data: {
                name: data.name,
                parentId: data.parentId || null,
            },
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
     */
    static async update(id: string, data: UpdateCategoryDto) {
        await this.getById(id); // –ü—Ä–æ–≤–µ—Ä–∫–∞
        return prisma.category.update({
            where: { id },
            data: {
                name: data.name,
                parentId: data.parentId ?? undefined,
            },
        });
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * - –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
     * - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * - –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –≤ ProductCategory, DiscountCategory
     */
    static async delete(id: string) {
        // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        await this.getById(id);

        // üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await prisma.$transaction(async (tx) => {
            // 1Ô∏è‚É£ –ù–∞–π—Ç–∏ –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const children = await tx.category.findMany({
                where: { parentId: id },
            });

            // üîÑ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for (const child of children) {
                await this.delete(child.id);
            }

            // 2Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
            await tx.productCategory.deleteMany({
                where: { categoryId: id },
            });

            // 3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å–∫–∏–¥–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            await tx.discountCategory.deleteMany({
                where: { categoryId: id },
            });

            // 4Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const products = await tx.product.findMany({
                where: {
                    categories: {
                        some: { categoryId: id },
                    },
                },
            });

            const productIds = products.map((p) => p.id);

            if (productIds.length > 0) {
                // üõë –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await tx.productVariant.deleteMany({
                    where: { productId: { in: productIds } },
                });

                await tx.rating.deleteMany({
                    where: { productId: { in: productIds } },
                });

                await tx.favorite.deleteMany({
                    where: { productId: { in: productIds } },
                });

                await tx.productView.deleteMany({
                    where: { productId: { in: productIds } },
                });

                await tx.discountProduct.deleteMany({
                    where: { productId: { in: productIds } },
                });

                // üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
                await tx.product.deleteMany({
                    where: { id: { in: productIds } },
                });
            }

            // 5Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            await tx.category.delete({
                where: { id },
            });
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    static async getChildren(parentId: string) {
        return prisma.category.findMany({
            where: { parentId },
            orderBy: { name: 'asc' },
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (2 —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
     */
    static async getTree() {
        return prisma.category.findMany({
            where: { parentId: null },
            orderBy: { name: 'asc' },
            include: {
                children: {
                    orderBy: { name: 'asc' },
                    include: {
                        children: {
                            orderBy: { name: 'asc' },
                        },
                    },
                },
            },
        });
    }
}
