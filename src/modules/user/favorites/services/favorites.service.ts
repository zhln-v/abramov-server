import { prisma } from '../../../../core/db';
import { NotFoundError } from '../../../../core/errors/AppError';

export class UserFavoritesService {
    // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    static async getAll(userId: string) {
        try {
            const favorites = await prisma.favorite.findMany({
                where: { userId },
                include: {
                    product: {
                        include: {
                            variants: true,
                            discounts: { include: { discount: true } },
                            categories: { include: { category: true } },
                        },
                    },
                },
                orderBy: { createdAt: 'desc' },
            });

            return favorites.map((fav) => fav.product);
        } catch (error: any) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${error.message}`);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        }
    }

    // ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    static async add(userId: string, productId: string) {
        try {
            const exists = await prisma.favorite.findFirst({
                where: { userId, productId },
            });

            if (exists) {
                console.warn(`–¢–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: ${productId}`);
                return exists;
            }

            // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            const [favorite, product] = await prisma.$transaction([
                prisma.favorite.create({
                    data: { userId, productId },
                }),
                prisma.product.findUnique({
                    where: { id: productId },
                    include: {
                        variants: true,
                        discounts: { include: { discount: true } },
                        categories: { include: { category: true } },
                    },
                }),
            ]);

            return product;
        } catch (error: any) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: ${error.message}`);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
        }
    }

    // ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    static async remove(userId: string, productId: string) {
        try {
            const favorite = await prisma.favorite.findFirst({
                where: { userId, productId },
            });

            if (!favorite) {
                console.warn(`–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${productId}`);
                throw new NotFoundError('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');
            }

            await prisma.favorite.delete({
                where: { id: favorite.id },
            });

            return { message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' };
        } catch (error: any) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${error.message}`);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        }
    }
}
